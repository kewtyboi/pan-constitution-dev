# Prettier Configuration for the Pan Constitution Template Project
# This file ensures consistent code formatting across the entire project.
# For a full list of options, see: https://prettier.io/docs/en/options.html

# --- Global Settings ---

# Print width: Specifies the line length that the printer will wrap on.
# We use 120 characters to balance readability and making good use of screen real estate.
printWidth: 120

# Tab width: Specifies the number of spaces per indentation-level.
# 2 spaces is a common convention in modern web development.
tabWidth: 2

# Use spaces instead of tabs for indentation.
useTabs: false

# Semicolons: Whether to add a semicolon at the end of every statement.
# We use `true` for consistency and to avoid potential issues with Automatic Semicolon Insertion (ASI) in JavaScript.
semi: true

# Single quotes: Whether to use single quotes instead of double quotes.
# We use single quotes for strings, which is a common convention.
singleQuote: true

# Quote properties: When to add quotes to object properties.
# `as-needed` means Prettier will only add quotes around object properties where they are required.
quoteProps: "as-needed"

# Trailing commas: Print trailing commas wherever possible in multi-line comma-separated syntactic structures.
# `es5` means trailing commas are added where valid in ES5 (objects, arrays, etc.). This makes adding new items easier and results in cleaner git diffs.
trailingComma: "es5"

# Bracket spacing: Print spaces between brackets in object literals.
# `true` means `{ foo: bar }` instead of `{foo: bar}`.
bracketSpacing: true

# Bracket same line: Put the `>` of a multi-line HTML (HTML, JSX, Vue, Angular) element at the end of the last line instead of being alone on the next line.
# We set this to `false` for better readability.
bracketSameLine: false

# Arrow function parentheses: Include parentheses around a sole arrow function parameter.
# `avoid` means `x => x` instead of `(x) => x`.
arrowParens: "avoid"

# Range formatting: Format a part of a file.
# We set `rangeStart` to 0 to format the entire file by default.
rangeStart: 0

# Pragma: Control whether Prettier formats the file.
# `requirePragma: false` means Prettier will format files without a special pragma comment.
# `insertPragma: false` means Prettier will not insert a `@format` pragma into files.
requirePragma: false
insertPragma: false

# Prose wrap: How to wrap prose.
# `always` will wrap prose if it exceeds the print width. This is useful for Markdown files.
proseWrap: "always"

# HTML whitespace sensitivity: How to handle whitespace in HTML.
# `css` respects the default CSS `display` property of elements.
htmlWhitespaceSensitivity: "css"

# Vue files indentation: Whether to indent script and style tags in Vue files.
# We set this to `false` as we are not using Vue in this project.
vueIndentScriptAndStyle: false

# End of line: The line ending to use.
# `lf` is the standard for Linux and macOS.
endOfLine: "lf"

# Embedded language formatting: How to format embedded code.
# `auto` will format embedded code if Prettier can automatically identify it.
embeddedLanguageFormatting: "auto"

# Single attribute per line: Enforce a single attribute per line in HTML, Vue and JSX.
# We set this to `false` to allow multiple attributes on a single line.
singleAttributePerLine: false

# --- Overrides for Specific File Types ---
# These settings override the global settings for specific file types.
overrides:
  # Markdown specific settings
  - files: "*.md"
    options:
      printWidth: 120
      proseWrap: "always"
      tabWidth: 2
      useTabs: false

  # JSON specific settings
  - files: "*.json"
    options:
      printWidth: 120
      tabWidth: 2

  # YAML specific settings
  - files: ["*.yml", "*.yaml"]
    options:
      printWidth: 120
      tabWidth: 2
      # We use double quotes for strings in YAML for consistency with other tools.
      singleQuote: false

  # package.json specific settings
  - files: "package.json"
    options:
      printWidth: 120
      tabWidth: 2

